//
// Copyright (c) 2018 [n/a] info@embeddora.com All rights reserved
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//        * Redistributions of source code must retain the above copyright
//          notice, this list of conditions and the following disclaimer.
//        * Redistributions in binary form must reproduce the above copyright
//          notice, this list of conditions and the following disclaimer in the
//          documentation and/or other materials provided with the distribution.
//        * Neither the name of The Linux Foundation nor
//          the names of its contributors may be used to endorse or promote
//          products derived from this software without specific prior written
//          permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NON-INFRINGEMENT ARE DISCLAIMED.    IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
// OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
// OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
// ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Abstract:            exploits to break into root shell via curl, LUA, etc
//
// Usage:               none
//
// Version:             0.0.8

#ifndef EXPLOIT_ANY
#define EXPLOIT_ANY

/// CURL exploit, extracted from https://blog.cloudflare.com/inside-shellshock/
/// Assuming that HTTP files will be classified as text files any occurence
/// of '{ :; };' substrig (in various passible permutations) may result in 
/// effective curl-attack describe at link above. No tested, authourship unknown.
const std::string SE_M1 = "{:;};";

/// CURL exploit, see more at: https://blog.cloudflare.com/inside-shellshock/
/// Assuming none of HTTP/text files shall process passwords (even hashed) in 
/// open form any attempt to list (hased) password to be regardes as an intention
/// of attacking-loaded activity. No tested, authourship unknown.
const std::string SE_M2 = "cat /etc/passwd";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// The below operatoin executed from within root shell will result in system roboot.
/// Going from assumption that certain LUA-based engines do not restrict execution of 
/// of statements from witin root shell, the below entry is regarded as apparently
/// hazardous on such systems. Tested, proven to be effective certain on LUA/LUCI-based
/// site engines (included into OpenWRT, and clones).
const std::string SE_M3 = "echo b>/proc/sysrq-trigger";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// The below operatoin executed from within root shell will result in system roboot.
/// Going from assumption that certain LUA-based engines do not restrict execution of 
/// of statements from witin root shell, the below entry is regarded as apparently
/// hazardous on such systems. Tested, proven to be effective certain on LUA/LUCI-based
/// site engines (included into OpenWRT, and clones).
const std::string SE_M4 = "\27<`reboot`";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// The below operatoin executed from within root shell will result in kill all processes
/// on the current virtual console Going from assumption that certain LUA-based engines
/// do not restrict execution of statements from witin root shell, the below entry is 
/// regarded as potentially hazardous on such systems. Tested, proven to be effective 
/// certain range of LUA/LUCI-based site engines (included into OpenWRT, and clones).
const std::string SE_M5 = "opkg>/proc/sysrq-trigger";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// Same as above from technical implementation, and results in (potentially hazardous) 
/// re-mount of all monted filesystems of Linux. Tested, proven to be effective 
/// certain range of LUA/LUCI-based site engines (included into OpenWRT, and clones).
const std::string SE_M6 = "uname>/proc/sysrq-trigger";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// The below operatoin executed from within root shell will result in system power-off.
/// Vital is to use for this attack an 0x27 character which shadows preceeding part of parameter 
/// thus miking a shell command 'poweroff' being sent directory to interpreter od a root shell. 
/// Tested, proven to be effective certain range of LUA/LUCI-based site engines (included into
/// OpenWRT, and clones).
const std::string SE_M7 = "\x27<`poweroff`";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// With respect to 0x27 character - see above, also it's important that '$IFS' environmant
/// variable to have conventional value, see its manual. (Since the explot won't work if we'll use
/// whitespace (' ') character plainly). In case of successful breaking into root shell the 
/// modules being unloaded and system becomes unstable. Tested, proven to be effective
/// certain range of LUA/LUCI-based site engines (included into OpenWRT, and clones).
const std::string SE_M8 = "\x27<`rmmod$IFS";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// With respect to 0x27 character - see above, also it's important that '$IFS' environmant
/// variable to have conventional value, see its manual. (Since the explot won't work if we'll use
/// whitespace (' ') character plainly). In case of successful breaking into root shell the 
/// desired module(s) being loaded which may cause system unstability. Tested, proven
/// to be effective certain range of LUA/LUCI-based site engines (included into OpenWRT,
/// and clones).
const std::string SE_M9 = "\x27<`insmod$IFS";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// With respect to 0x27 character - see above, also it's important that '$IFS' environmant
/// variable to have conventional value, see its manual. (Since the explot won't work if we'll use
/// whitespace (' ') character plainly). In case of successful breaking into root shell the 
/// contents of on-board flash is subject for alteration by menas of 'nvrammanage', which is 
/// an apparent vulnerability. Tested, proven to be effective certain range of LUA/LUCI-based
/// site engines (included into OpenWRT, and clones).
const std::string SE_M10 = "\27<`nvrammanager$IFS";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// With respect to 0x27 character - see above, also it's important that '$IFS' environmant
/// variable to have conventional value, see its manual. (Since the explot won't work if we'll use
/// whitespace (' ') character plainly). In case of successful breaking into root shell 
/// it may generate a outgoing traffic storm (an kind of DoS-attack towards host(s) of
/// a local network. Tested, proven to be effective certain range of LUA/LUCI-based
/// site engines (included into OpenWRT, and clones).
const std::string SE_M11 = "\27<`echo$IFS'netmsg${IFS}";

/// LUA exploit, see more at: "... Sustainability Inspection.pdf" (not published on Internet)
/// With respect to 0x27 character - see above, also it's important that '$IFS' environmant
/// variable to have conventional value, see its manual. (Since the explot won't work if we'll use
/// whitespace (' ') character plainly). In case of successful breaking into root shell 
/// it may feed ffrom outter net a procompiled application and exeute it locally from
/// within a root shell. Potential hazard: absolute. Tested, proven to be effective
/// certain range of LUA/LUCI-based site engines (included into OpenWRT, and clones).
const std::string SE_M12 = "\27<`tftp${IFS}-g";

#endif // #define EXPLOIT_ANY
